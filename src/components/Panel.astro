---
// panel layers using a stacked CSS Grid in this order from the 'top' to the 'bottom'
// - animation (used for animating in and out)
// - content (usually text or icons with a drop/text shadow)
// - gradient (would accept a single color or two colors to form a gradient)
// - highlight (used for showing hover/highlight color effects for hover/focus states and for a 'selected' state)
// - background-image (could be the same layer as the background color using CSS background property?)
// - background-color (takes in a single color or "light/dark", which will adapt depending on the system theme)
// - blur (2rem)
// the panel also has an optional 'header' section that can take in an icon and text 
import { Icon } from 'astro-icon/components';

interface Props {
  id?: string;
  headerText?: string;
  headerSize?: string;
  headerIcon?: string;
  animation?: string;
  gradient?: string | [string, string];
  backgroundImage?: string;
  backgroundColor?: string;
  inside?: boolean;
  empty?: boolean;
  class?: string;
  
}

const { 
  id,
  headerText, 
  headerSize,
  headerIcon, 
  animation, 
  gradient, 
  backgroundImage, 
  backgroundColor,
  inside = false,
  empty = false,
  class: className,
  ...rest
} = Astro.props;
---

<panel 
  id={id}
  class:list={[className, "panel"]} {...rest}>
    {(headerText || headerIcon) && 
    <div class="panel-header">
        {headerIcon && <Icon class:list={["panel-header-icon", `size-${headerSize}`]} name={headerIcon} />}
        {(headerText && headerSize === "3") && <h3 class="panel-text size-3">{headerText}</h3>}
        {(headerText && headerSize === "4") && <h4 class="panel-text size-4">{headerText}</h4>}
        {(headerText && headerSize === "5") && <h5 class="panel-text size-4">{headerText}</h5>}
    </div>}
    
    {empty ? 
      <div class="empty"><Icon class="empty-icon" name="mdi:close" /></div> : 
      <div class="panel-content">
          <slot />
      </div>
    }
</panel>

<style lang="scss" define:vars={{gradient, backgroundImage, backgroundColor, animation}}>
.panel {
  display: flex;
  flex-direction: column;
  backdrop-filter: blur(1rem);
  background-color: none;
  background-color: rgba(var(--backgroundColor), 0.11);
  border-top: 2px solid rgba(var(--gray-0-rgb), 0.11);
  border-bottom: 2px solid rgba(var(--gray-0-rgb), 0.11);
  &.inside {
    margin: 0 -1rem;
    border-bottom: none;
    &:first-child {
      border-top: none;
    }
    .panel-header {
      border-bottom: none;
    }
    .empty {
      border-top: 2px solid rgba(var(--gray-0-rgb), 0.11);
    }
    &.small {
      border-top: 2px solid rgba(var(--gray-0-rgb), 0.11);
      border-bottom: 2px solid rgba(var(--gray-0-rgb), 0.11);
      margin: 0;
    }
  }
  .empty {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
    min-height: 10rem;
    .empty-icon {
      font-size: 4rem;
      color: rgba(var(--gray-0-rgb), 0.11);
    }
  }
  .panel-header {
    display: flex;
    height: fit-content;
    padding: 1rem;
    gap: 0.5rem;
    text-shadow: var(--text-shadow-lg);
    border-bottom: 2px solid rgba(var(--gray-0-rgb), 0.11);
  }
  .panel-header-icon {
    &.size-3 {
        font-size: 2.5rem;
    }
    &.size-4 {
        font-size: 2rem;
    }
    &.size-5 {
        font-size: 1.75rem;
    }
  }
  .panel-content {
    padding: 1rem;
    position: relative;
    color: var(--gray-100);
    text-shadow: var(--text-shadow-sm);
    &:has(.inside) {
      padding: 0 1rem;
    }
  }
}
</style>
