---
import { Icon } from "astro-icon/components";
import LinkIconButton from "../components/LinkIconButton.astro";

interface Props {
  title: string;
  description: string;
  tags: string[];
  view?: string;
  details?: string;
  code?: string;
  design?: string;
  index?: number;
  status?: string;
  progressCurrent?: string;
  progressEnd?: string;
  background?: string;
  class?: string;
}

const {
  title,
  description,
  tags,
  view,
  details,
  code,
  design,
  index,
  status,
  progressCurrent,
  progressEnd,
  background,
  class: className,
  ...rest
} = Astro.props;
---

<div
  class="fade-in-animation"
  style={{ animationDelay: (index ?? 1) / 10 + "s" }}
>
  <div
    class:list={[className, "work-item", background && "backgroundImg"]}
    {...rest}
  >
    <div class="header">
      {
        status === "Upcoming" ? (
          <h3 class="title" transition:name={title}>{title}</h3>
        ) : (
          <a class="interactive" href={details}><h3 class="title" transition:name={title}>{title}</h3></a>
        )
      }
      {
        progressCurrent && progressEnd && (parseInt(progressCurrent) < parseInt(progressEnd)) ? (
          <div class="progress">
            <Icon class="progress-icon" name="mdi:progress-check"/>
            <div class="progress-values">
              <span>{progressCurrent}</span>
              <span>/</span>
              <span>{progressEnd}</span>
            </div>
            <span class="progress-label">Progress</span>
          </div>
        ) : () => null
      }
    </div>
    <p class="description">{description}</p>
    <div class="footer">
      <div class="tags">
        {
          status ? (
            <span class="tag status flex-center">{status}</span>
          ) : (
            () => null
          )
        }
        {tags?.map((tag) => <span class="tag flex-center">{tag}</span>)}
      </div>
      {
        status === "Upcoming"
          ? () => null 
          : (
        <div class="actions">
          {
            view ? (
              <LinkIconButton
                small
                reveal
                above
                label="view"
                icon="mdi:eye"
                link={view}
                external
                mono={!!background}
              />
            ) : (
              <span />
            )
          }
          <LinkIconButton
            small
            reveal
            above
            label="details"
            icon="mdi:text-box"
            link={details}
            mono={!!background}
          />
          {
            code ? (
              <LinkIconButton
                small
                reveal
                above
                label="code"
                icon="mdi:code"
                link={code}
                external
                mono={!!background}
              />
            ) : (
              <span />
            )
          }
          {
            design ? (
              <LinkIconButton
                small
                reveal
                above
                label="design"
                icon="mdi:design"
                link={design}
                external
                mono={!!background}
              />
            ) : (
              <span />
            )
          }
        </div>
        )
      }
      
    </div>
  </div>
</div>

<style lang="scss" define:vars={{ background }}>
  @-webkit-keyframes FadeIn {
    0% {
      opacity: 0.3;
      -webkit-transform: scale(0.95) translateY(3px);
    }
    100% {
      opacity: 1;
      -webkit-transform: scale(1) translateY(0px);
    }
  }
  @keyframes FadeIn {
    0% {
      opacity: 0.3;
      transform: scale(0.9) translateY(3px);
      border: 2px transparent;
    }
    30% {
      opacity: 0.8;
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0px);
    }
  }
  .fade-in-animation {
    animation: FadeIn 0.8s cubic-bezier(0.19, 1, 0.22, 1) both;
  }

  .work-item {
    background-color: rgba(var(--gray-999-rgb), 0.66);
    border: 2px solid rgba(var(--gray-0-rgb), 0.11);
    padding: 0.5rem 0.5rem 0.5rem 1rem;
    margin: 1rem 0.5rem;
    -webkit-transition: all 0.3s cubic-bezier(0.19, 1, 0.22, 1);
    transition: all 0.3s cubic-bezier(0.19, 1, 0.22, 1);
    &.backgroundImg {
      background: var(--background), rgba(var(--gray-999-rgb), 0.33);
      background-blend-mode: overlay;
      background-size: cover;
      background-repeat: no-repeat;
      background-position: top;
      border: 2px solid var(--gray-400);
      .header {
        display: flex;
        justify-content: space-between;
        border-bottom: 2px solid rgba(var(--gray-0-rgb), 0.33);
        .progress {
          display: grid;
          grid-template-columns: repeat(2, auto);
          grid-template-rows: repeat(2, auto);
          grid-column-gap: 0.25rem;
          grid-row-gap: 0;
          cursor: default;
          height: fit-content;
          width: max-content;
          font-weight: 600;
          backdrop-filter: blur(3px);
          background-color: rgba(var(--gray-999-rgb), 0.11);
          text-shadow: var(--text-shadow-lg);
          margin: -0.5rem;
          padding: 0.125rem 0.5rem;
          .progress-icon {
            font-size: 1.125rem;
            grid-area: 1 / 1 / 2 / 2;
            justify-self: center;
            align-self: center;
            filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.11)) drop-shadow(0 2px 0 rgba(255, 255, 255, 0.11));
            opacity: 0;
            width: 0;
            transition: all 0.5s cubic-bezier(0.075, 0.82, 0.165, 1);
            transform: translateX(10px);
          }
          .progress-values {
            grid-area: 1 / 2 / 2 / 3;
            display: flex;
            gap: 0.125rem;
          }
          .progress-label {
            grid-area: 2 / 1 / 3 / 3;
            justify-self: start;
            // font-size: 0.72rem;
            font-size: 0.85rem;
            height: 0;
            width: 0;
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.075, 0.82, 0.165, 1);
            transform: translateY(-5px);
          }
        }
        &:hover {
          grid-template-rows: 1fr;
          .progress-icon {
            opacity: 1;
            width: max-content;
            transform: translateX(0);
          }
          .progress-label {
            transition-delay: 0.25s;
            height: max-content;
            width: max-content;
            opacity: 1;
            transform: translateY(0);
          }
        }
      }
      &:hover {
        background: var(--background), rgba(var(--gray-999-rgb), 0.21);
        background-size: cover;
        background-repeat: no-repeat;
        background-position: top;
        background-blend-mode: overlay;
        border: 2px solid var(--gray-300);
      }
      html.theme-dark &:hover {
        background: var(--background), rgba(var(--gray-999-rgb), 0.11);
        background-size: cover;
        background-repeat: no-repeat;
        background-position: top;
        background-blend-mode: overlay;
      }
      .footer {
        .tags .tag {
          border: 2px solid rgba(var(--gray-0-rgb), 0.11);
          background-color: rgba(var(--gray-0-rgb), 0.11);
          &:hover {
            border: 2px solid rgba(var(--gray-0-rgb), 0.33);
          }
        }
        
        &:not(:has(.actions)) {
          margin-top: 0.5rem;
        }
      }
    }
    &:hover {
      border: 2px solid rgba(var(--gray-0-rgb), 0.33);
      background-color: var(--gray-900);
      transform: translate3d(0, -3px, 3px);
      html.theme-dark & {
        background-color: var(--gray-800);
      }
    }
    a {
      display: inline-block;
      text-decoration: none;
      &:hover,
      &:focus-visible {
        text-decoration: underline;
      }
    }
    .title {
      font-size: var(--text-2xl);
    }
    .header {
      display: flex;
      width: 100%;
      height: auto;
      padding-bottom: 0.5rem;
      text-shadow: var(--text-shadow-lg);
      border-bottom: 2px solid rgba(var(--gray-0-rgb), 0.11);
      .progress {
        font-weight: 500;
        backdrop-filter: blur(3px);
        background-color: rgba(var(--gray-0-rgb), 0.11);
        text-shadow: var(--text-shadow-lg);
      }
    }
    .description {
      margin: 0.5rem 0.5rem 0 0;
      color: var(--gray-100);
      font-weight: 500;
      text-shadow: var(--text-shadow-sm);
    }

    .footer {
      display: flex;
      align-items: flex-end;
      width: 100%;
      .tags {
        position: relative;
        height: fit-content;
        display: flex;
        flex: 1;
        align-items: flex-end;
        gap: 0.5rem;
        overflow-x: auto;
        padding: 0 0.3rem;
        margin-left: -0.3rem;
        scrollbar-width: thin;
        scrollbar-color: var(--gray-600);
        // -webkit-mask: linear-gradient(90deg, #0000, #000 1% 98%, #0000);
        .tag {
          display: grid;
          position: relative;
          border: 2px solid rgba(var(--gray-0-rgb), 0.11);
          border-radius: 35px;
          padding: 0 0.75rem;
          white-space: nowrap;
          font-weight: 500;
          backdrop-filter: blur(3px);
          background-color: rgba(var(--gray-0-rgb), 0.11);
          &:hover,
          &:focus-visible {
            cursor: default;
            border: 2px solid rgba(var(--gray-0-rgb), 0.33);
          }
          &.status {
            color: var(--gray-999);
            background-color: var(--gray-200);
            border: 2px solid var(--gray-200);
            border-radius: 8px;
            font-weight: 500;
          }
        }
      }

      .actions {
        display: flex;
        margin-bottom: -0.5rem;
      }
    }
  }
</style>
<script src="../utilities/magnetism.ts"></script>
