---
interface Props {
  first?: string;
  second?: string;
  toggleTheme?: boolean;
}
const {
  first = "Alex Reddicks",
  second = "augmented.alex",
  toggleTheme,
} = Astro.props;
---

<flip-header
  data-first={first}
  data-second={second}
  data-toggleTheme={toggleTheme}
>
  <h1 class="interactive-header text-gradient-accent interactive fluid"></h1>
</flip-header>

<style lang="scss">
  .interactive-header {
    cursor: pointer;
    text-align: center;
    user-select: none;
    transition: all 0.2s;
    text-wrap: balance;
    margin: auto;
    min-height: 100px;
    --font-level: 5;
  }
  .flipping {
    opacity: 0;
    transform: translateY(-10px);
  }
  h1 {
    text-align: center;
  }
</style>

<script>
  class FlipHeader extends HTMLElement {
    constructor() {
      super();
      const header = this.querySelector("h1")!;
      let isFlipped = false;
      enum Theme {
        Light = "light",
        Dark = "dark",
      }
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme") as Theme;
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark" as Theme
          : "light" as Theme;
      };
      let currentTheme: Theme = getThemePreference();

      /** Set the theme to dark/light mode. */
      const setTheme = (theme: Theme) => {
        switch (theme) {
          case Theme.Light:
            document.documentElement.classList.remove("theme-dark");
            localStorage.setItem("theme", Theme.Light);
            break;
          case Theme.Dark:
            document.documentElement.classList.add("theme-dark");
            localStorage.setItem("theme", Theme.Dark);
            break;
          default:
            // look at default browser theme
            const isDarkPref = getThemePreference() === "dark";
            document.documentElement.classList[isDarkPref ? "add" : "remove"]("theme-dark");
        }
      };
      header.addEventListener("click", () => {
        isFlipped = !isFlipped;
        setTheme(this.isDark() ? Theme.Light : Theme.Dark);
        header.classList.add("flipping");
        void header.offsetWidth;
        setTimeout(() => {
          header.textContent = this.isDark()
            ? (this.dataset.second as string)
            : (this.dataset.first as string);
          header.classList.remove("flipping");
        }, 200);
      });
      setTheme(currentTheme);
      header.textContent = this.isDark()
        ? (this.dataset.second as string)
        : (this.dataset.first as string);
    }

    isDark() {
      return document.documentElement.classList.contains("theme-dark");
    }
  }

  customElements.define("flip-header", FlipHeader);
</script>
<script is:inline>
  // const getThemePreference = () => {
  //   if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
  //     return localStorage.getItem("theme");
  //   }
  //   return window.matchMedia("(prefers-color-scheme: dark)").matches
  //     ? "dark"
  //     : "light";
  // };
  // const isDark = getThemePreference() === "dark";
  // document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

  // if (typeof localStorage !== "undefined") {
  //   // Watch the document element and persist user preference when it changes.
  //   const observer = new MutationObserver(() => {
  //     const isDark = document.documentElement.classList.contains("theme-dark");
  //     localStorage.setItem("theme", isDark ? "dark" : "light");
  //   });
  //   observer.observe(document.documentElement, {
  //     attributes: true,
  //     attributeFilter: ["class"],
  //   });
  // }
  function applyTheme() {
    localStorage.theme === "dark"
      ? document.documentElement.classList.add("theme-dark")
      : document.documentElement.classList.remove("theme-dark");
  }

  document.addEventListener("astro:after-swap", applyTheme);
  applyTheme();
</script>
<script src="../utilities/magnetism.ts"></script>